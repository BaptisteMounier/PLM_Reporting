*** TODO
* Bibliographie
- [[https://github.com/oster/PLM][Base PLM]]
- [[https://github.com/BaptisteMounier/PLM][Fork PLM]]
- [[https://github.com/MatthieuNICOLAS/webPLM][Base WebPLM]]
- [[https://github.com/BaptisteMounier/webPLM][Fork WebPLM]]
- [[https://github.com/google/blockly][Base Blockly]]
* Utilisation
** WebPLM
- Ce reporting fait réference à [[https://github.com/BaptisteMounier/webPLM][Fork WebPLM]], ce projet est une version de [[https://github.comb.com/matthieunicolas/webPLM][Base WebPLM]] utilisant [[https://github.com/google/blockly][Base Blockly]] comme un langages de programmation. Il utilise [[https://www.playframework.com/][Play Framework]] en Back-end et [[https://angularjs.org/][AngularJS]] en Front-end.
** Démarrage
- Il est d'abord nécessaire d'[[https://www.playframework.com/documentation/2.3.x/Installing][installer Play Framework]]
- Puis de cloner le dépôt [[https://github.com/BaptisteMounier/webPLM][Fork WebPLM]]
  - git clone https://github.com/BaptisteMounier/webPLM.git
  - Se déplacer sur la branche "blockly_angularJS"
- Il faut ensuite lancer le serveur
  - cd path/webPLM
  - activator start
- Enfin d'accèder au site web
  - [[http://localhost:9000][localhost:9000]]
* Journal
** 01 juin
*** Activité
- Nettoyage du code
- Exploration du système de traduction Blockly actuel
  - Discution en cours sur un choix d'une autre implémentation
*** Problème
- Affichage lorsqu'on passe d'une leçon à une autre en restant sous Blockly
  - La leçon change mais codemirror prend la main sur l'affichage en laissant Blockly comme langage
*** Objectif
- [ ] Correction de l'affichage
- [ ] Nettoyage du code
- [ ] Gestion des retours d'erreurs
- [ ] Gestion de la traduction
** 29 mai
*** Activité
- Correction de l'affichage des blocks lorsqu'on charge un workspace pour Blockly
- Nettoyage du code
*** Problème
*** Objectif
- [X] Finition affichage
- [ ] Nettoyage du code
- [ ] Gestion des retours d'erreurs
  - Test
- [ ] Gestion de la traduction
** 28 mai
*** Activité
- Correction de l'affichage de codemirror lorsqu'on vient d'un affichage Blockly
- Exploration des functions de Blockly vis à vis du workspace pour corriger le problème d'affichage des blocks chargé
*** Problème
*** Objectif
- [ ] Finition affichage
  - Affichage lors d'un changement de langage depuis Blockly
- [ ] Nettoyage du code
- [ ] Gestion des retours d'erreurs
- [ ] Gestion de la traduction
** 27 mai
*** Activité
- Chargement blocks
*** Problème
- Affichage des blocks chargés
  - Ils ne s'affichent pas avec la taille adéquate et nécessite de déplacer les blocks pour les rendre correctement
- Affichage lors d'un changement de langage depuis Blockly
  - Le contenu de codemirror ne se met à jour (par rapport au langage avant Blockly) qu'une fois la selection mise dans l'éditeur
*** Objectif
- [X] Gestion du stockage
- [X] Corriger l'affichage
  - Ce n'était pas un problème, juste l'état normal lors d'un utilisation sans compte
- [ ] Finition affichage
  - Affichage des blocks chargés
  - Affichage lors d'un changement de langage depuis Blockly
- [ ] Nettoyage du code
- [ ] Gestion des retours d'erreurs
  - En attente des test
- [ ] Gestion de la traduction
** 26 mai
*** Activité
- Correctif erreur console, translation cadre Blockly
- Poursuite gestion stockage
  - Correctif de régression de code, la sauvegarde et le chargement dans les langages de base à nouveau fonctionnel
*** Problème
- Workspace non envoyé au client
*** Objectif
- [ ] Gestion du stockage
  - Finir le chargement du workspace depuis le fichier correspondant
- [ ] Corriger l'affichage
  - Liéé au stockage
- [ ] Gestion des retours d'erreurs
  - Effectuer une série de test pour déterminer quelles erreurs sont possible
  - Améliorer le rendu du retour d'erreur, enlever les parties non utiles
  - Faire le lien entre l'erreur et le block en cause
- [ ] Gestion de la traduction
- [ ] Nettoyage du code
** 22 mai
*** Activité
- Correction execution avec Blockly
- Finition envoie des fichiers de code et de workspace au serveur
- Approche des rapports d'erreur
- Approche de la traduction
*** Problème
- Stockage
  - Le serveur n'arrive pas à récupérer la session chez le client
  - Sauvegarde de l'avancement impossible
  - currentUser dans PLMActor.scala reste à null
- Retours d'erreur
  - Je n'arrive pas à voir/refaire un cas où ils ont besoin de modifications
  - Les seules erreurs possibles sont du type "Erreur : Vous avez heurté un mur. ça fait mal.  File "<script>", line 14, in <module> File "<script>", line 2, in forward"
  - Ce sont les mêmes indications que pour le langage Python (dont seul la première partie est exploitable via l'interface WebPLM, la seconde partie n'est pas visible par l'étudiant)
  - Les autres erreurs du type "Erreur de nom : vous semblez utiliser un identifiant qui n'existe pas. Auriez-vous fait une typo ? NameError("name 'foward' is not defined",) File "<script>", line 0, in <module>" ne sont pas possibles (à moins que j'ai mal défini le block, mais ça l'étudiant n'y pourra rien)
- Traduction
  - Système de traduction intégré à Blockly non fonctionnel
*** Objectif
- [ ] Gestion du stockage
  - Ajuster par rapport à la "session"
  - Correction de l'affichage de chargement du workspace
- [ ] Corriger l'affichage
  - Le mauvais chargement au démarrage est également bloqué par le problème de session
- [ ] Gestion des retours d'erreurs
  - En fonction du retour sur la section Problème
- [ ] Gestion de la traduction
  - Nouvelle implémentation (lié au système de traduction de WebPLM) à envisager
- [ ] Nettoyage du code
  - Supression des fonctions non utiles/fonctionnelles récupérées depuis d'autre projets
  - Mise à jour de la documentation pour les fonctions récupérées depuis d'autres projets
** 21 mai
*** Activité
- Exploration gestion stockage côté serveur
*** Problème
- L'execution ne s'effectue pas correctement avec Blockly
  - Code généré bien envoyé de même que le workspace mais aucun changement au niveau de l'aperçu au retour
*** Objectif
- [ ] Gestion du stockage
- [ ] Corriger l'affichage
- [ ] Gestion des retours d'erreurs
- [ ] Gestion de la traduction
** 20 mai
*** Activité
- Implémentation de la gestion du stockage du côté de PLM
*** Problème
- La création deux deux fichiers (.code / .workspace) fonctionnent mais le passage PLM => WebPLM pose problème
- Lors d'un test en boucle fermée côté client, les blocks générés ont un problème de taille, il est nécessaire de les déplacer pour qu'ils retrouvent leur taille normal
*** Objectif
- [ ] Gestion du stockage
- [ ] Corriger l'affichage
- [ ] Gestion des retours d'erreurs
- [ ] Gestion de la traduction
** 19 mai
*** Activité
- Poursuite du second choix
  - Sauvegarde dans la liste sourcesFiles
  - Modification dans un fichier afin d'effectuer la sauvegarde lors du run grace à la création d'un second élément dans la liste
*** Problème
- Modifications réalisées inefficaces, le lieu de modification dans le fichier en question n'est pas parcourru lors de l'execution
*** Objectif
- [ ] Corriger l'affichage
  - Lorsque le site se lance avec une session présente sur Blockly, le langage est bien séléctionné mais c'est l'affichage de Java qui est présent
- [ ] Gestion du stockage du code généré
  - Retracer le parcours de l'execution afin d'implémenter la solution correctement
- [ ] Gestion de la traduction
** 18 mai
*** Activité
- Essai de mise en place de stockage
  - 1er choix : Modification de la varioable "ext" en un tableau
    - Prendre et mettre tout ce qui est relatif au fonctionnement direct dans path.ext[0], le code généré de blockly et les .lang classiques des autres langages
    - Prendre et mettre tout ce qui est relatif au visuel dans path.ext[1], le workspace pour le cas de blockly
    - Mis de côté (entre autre problème avec Akka)
  - 2nd choix : Se servir de la liste des sourcesFiles
    - Idem que choix 1 mais avec cette liste : place 1 => fonctionnement
    - Idem que choix 1 mais avec cette liste : place 2 => visuel
    - En cours d'essai
*** Problème
*** Objectif
- [ ] Gestion du stockage du code généré
- [ ] Gestion de la traduction
** 13 mai
*** Activité
- Récupération du code des autres membres du projet.
  - Gestion des conflits
- Début implémentation du stockage
*** Problème
*** Objectif
- [ ] Gestion du stockage du code généré
- [ ] Gestion de la traduction
** 12 mai
*** Activité
- Début mise en place de l'envois et stockage des blocks placés par l'étudiant sous
  - Deux fichiers
    - Schéma créé par l'étudiant au format xml
    - Code python généré par le schéma
*** Problème
*** Objectif
- [ ] Gestion du stockage du code généré
- [ ] Gestion de la traduction
** 11 mai
*** Activité
- Correction erreur getteur pour les listes
  - Bancale : la mise en commentaire de la zone à problème permet pour le moment un fonctionnement complet, à surveiller sur des modifications ultérieures
- Correction erreur générer un block if à partir d'un code xml
- Reflexion, stockage
  - Structure envisagée
    - ExerciseBlocks.json
      - Déjà existant
      - Défini la toolbox
      - Non obligatoire, une toolbox composé de tous les blocks prend la main à partir du provider si le fichier n'existe pas. Une graduation à réaliser.
    - ExerciseBase.xml
      - Défini le workspace, des blocks donnés et placés dans blockly
      - Si null ou inexistant, workspace vierge
    - ExerciseEntity.blockly
      - Déjà existant
      - Défini l'exercice, la correction
      - Copié/coller de ExerciseEntity.py avec une épuration des éléments inutils (restriction d'utilisation de certaines méthodes)
      - Si null ou inexistant, blockly pas disponible pour cet exercice
*** Problème
- Précédent
- Mise à jour adaptée de la zone de consigne pour Blockly
*** Objectif
- [X] Créer les toolbox de tous les exercices de Welcome
- [ ] Gestion du stockage du code généré
- [ ] Gestion de la traduction
** 07 mai
*** Activité
- Poursuite création des blocks manquant
  - Color, Direction ...
  - List
- Début de correction blocks get pour les List
*** Problème
- Pour les fonctions spécifiques à un seul exercice et codées dans le fichier de l'exercice mais non visible par l'étudiant.
  - Créer un block se servant de la fonction. (état actuel; mais le block est inutilisable hors de l'exercice)
  - Créer un block créant la fonction.
  - Déplacement de la fonction côté serveur.
  - Cas : isOverOrange()/isGroundWhite()/crossing()/exitReaching/getIndication()
- Stockage et chargement du code étudiant réalisable en xml mais envois en résultat en python
  - Séparer la correction Blockly (en .py, le même que pour la correction Python) et les blocks données de base pour l'exercice dans un autre fichier ?
- Le blocks get pour les List ne s'affiche pas correctement à l'ajout
- Pas de block while avec condition en fin d'execution (inexistant dans le fichier de correction .py)
- Block de boucle for très différent ("count with x from a to b by c")
- Pas de block pour réaliser un append sur une liste
- Que faire pour les exercices demandant un copié/coller de l'exercice précédent ?
  - On peut dupliquer les blocks mais que dans le "même" Blockly
*** Objectif
- [ ] Créer les toolbox de tous les exercices de Welcome
  - Correctif block get pour les List
  - Création block modulo
- [ ] Gestion du stockage du code généré
- [ ] Gestion de la traduction
** 06 mai
*** Activité
- 1er listing des blocks à refaire
- Début de mise en place de blocks Color
*** Problème
*** Objectif
- [ ] Créer les toolbox de tous les exercices de Welcome
  - Régler les problèmes de couleurs et fonctions non crées
- [ ] Gestion du stockage du code généré
  - Regarder le cheminement actuel hors blockly
- [ ] Gestion de la traduction
** 05 mai
*** Activité
- Correction problème des blocks de procedures des utilisateurs
- 1ère exploration du fonctionnement de l'exportation
*** Problème
- La résolution du problème des blocks de procedures est très étrange (mise en garde à mettre)
*** Objectif
- [ ] Créer les toolbox de tous les exercices de Welcome
  - Régler les problèmes de couleurs et fonctions non créées
- [ ] Gestion du stockage du code généré
- [X] Générer un schéma Blockly
- [ ] Gestion de la traduction
** 04 mai
*** Activité
- Gestion de Blockly par les exercices qui ne sont pas de la forme ExerciseEntity.lang
*** Problème
- Création de fonction avec argument par l'utilisateur
*** Objectif
- [ ] Créer les toolbox de tous les exercices de Welcome
  - Corriger les fonctions de l'utilisateur (avec argument)
  - Régler les problèmes de couleurs et fonctions non créées
- [ ] Gestion du stockage du code généré
- [ ] Générer un schéma Blockly
- [ ] Gestion de la traduction
** 30 avril
*** Activité
- Création des toolbox pour les exercices de Welcome
  - Reste des détails à finir
*** Probème
- Des fonctions spécifiques à certains exercices sont passées à travers l'API
  - Création des blocs correspondant à faire
- Fonctionnement des couleurs à modifier pour avoir un block de couleur pour les test logique sur la couleur
- Se pencher sur le fonctionnement pour les langages des exercices ne contenant pas de fichier ExerciseEntity.lang
*** Objectif
- [ ] Créer les toolbox de tous les exercices de Welcome
  - Régler les derniers problèmes de couleurs et fonctions non créées
  - Etudier le fonctionnement des exercices ne disposant pas d'Entity
- [ ] Gestion du stockage du code généré
- [ ] Générer un schéma Blockly
** 29 avril
*** Activité
- Lier Blockly à l'exercice en cours
  - Création d'un fichier type ConditionsBlocks.json au même niveau que ConditionsEntity.blockly
  - Nouvelle méthode setToolbox() dans Lecture.java qui charge en attribut la toolbox dans le fichier .json sous forme d'une chaine et de getToolbox()
  - Appel de setToolbox dans le constructeur de Conditions.java
  - Ajout d'un champ dans LectureToJson pour la toolbox
*** Problème
*** Objectif
- [X] Lier Blockly avec l'exercice en cours
- [ ] Créer les toolbox de tous les exercices de Welcome
- [ ] Gestion du stockage du code généré
- [ ] Générer un schéma Blockly
** 28 avril
*** Activité
- Mise en place d'une Toolbox différente suivant l'exercice
  - Coder dans exercise.controller en dure pour un choix entre Moria et Conditions
*** Problème
- Pour la toolbox, quels blocks disponibles ?
  - Le strict minimum pour la réalisation
  - Tous les blocs du même type que ceux nécessaires ?
    - Exemple : nécessaire => forward, right / même type => backward, forward(x), backward(x), left, back
*** Objectif
- [ ] Lier Blockly avec l'exercice en cours
  - Déplacer la toolbox dans la base de PLM
  - Généraliser et créer les toolbox pour tous les exercices Welcome
- [ ] Gestion du stockage du code généré
- [ ] Généré un schéma Blockly
** 27 avril
*** Activité
- Mise en place choix des blocs disponibles suivant l'exercice
  - En dure dans exercise.controller et uniquement entre Moria et Conditions
- Réflexion sur le déplacement du choix des blocs disponibles vers une façon plus globale
  - Probablement stockage des toolbox pour chaque exercice dans un fichier Json au même niveau que MoriaEntity.blockly
  - A approfondir
*** Problème
- Quelques erreurs au changement d'exercice
  - Attribut sur des élements null
  - Apparition inconnue (même lorsque le langage n'est pas Blockly)
- Raccordement reste du projet
  - Au niveau la création d'un nouvel exercice
    - Obligation de créer le fichier de la toolbox, de la solution python en .blockly de créer le .jar et puis faire tous les blocs si non existant (bloc du type "move_forward")
    - Un peu lourd non ?
*** Objectif
- [ ] Lier Blockly avec l'exercice en cours
  - Généraliser le choix de la toolbox
- [ ] Gestion du stockage du code généré
- [ ] Générer un schéma Blockly
  - Langage d'origine à définir
** 24 avril
*** Activité
- Divers test sur le passage de la toolbox depuis exercise.controller.js
*** Problème
- Projet d'appuis AngularJS Blockly non fini et documentation associé non mis à jour par l'auteur
*** Objectif
- [ ] Lier Blockly avec l'exercice en cours
- [ ] Gestion du stockage du code généré
- [ ] Générer un schéma Blockly à partir d'un code Python
** 23 avril
*** Activité
- Création et utilisation des variables et fonctions de l'utilisateur
*** Problème
*** Objectif
- [X] Création de tous les blocks nécessaires à PLM
- [X] Générer le code du schéma Blockly
- [ ] Lier Blockly avec l'exercice en cours
- [ ] Gestion du stockage de code généré
- [ ] Générer un schéma Blockly à partir d'un code Python
** 22 avril
*** Activité
- Ajuster le code généré
  - Réalisation de l'exercice Moria possible à l'aide de Blockly
- Permettre à l'utilisateur de créer son propre block fonction
*** Problème
- L'ajout des blocks créés par l'utilisateur dans le menu de block de
  gauche
*** Objectif
- [ ] Création de tous les blocks nécessaires à PLM
  - Ajout automatique des variables fonctions crées par l'utilisateur
- [ ] Générer le code du schéma Blockly
  - Utilisation des blocks créés par l'utilisateur
- [ ] Lier Blockly avec l'exercice en cours
- [ ] Gestion du stockage du code généré
- [ ] Générer un schéma Blockly à partir d'un code Python
** 21 avril
*** Activité
- Génération du code depuis Blockly
- Réalisation de l'exercice par le code fournis par Blockly
- Création de tous les blocks nécessaires à la leçon "Welcome"
*** Problème
- Ajout de "99," à la fin du code généré pour chaque block lié
*** Objectif
- [X] Mettre en place tous les blocks d'un exercice (Moria, Welcome)
- [ ] Création de tous les blocks nécessaire à PLM
  - Ajout automatique des variables et fonctions créées par l'utilisateur
- [ ] Générer le code du schéma Blockly
  - Nettoyer le code
  - Variables et fonctions créées par l'utilisateur
- [ ] Lier BLockly avec l'exercice en cours
- [ ] Gestion du stockage du code généré
- [ ] Générer un schéma Blockly à partir d'un code Python
** 20 avril
*** Activité
- Création d'un début de base de block
  - Basé pour le moment sur l'exercice Moria
  - Génération de code python pour chaque block ajouté
*** Problème
- La génération pose encore quelques problèmes
  - Erreur js levées
  - Retour chariot dans la chaine de caractère formée
*** Objectif
- [X] Rendre immédiat l'affichage de Blockly à sa sélection
- [ ] Mettre en place tous les blocs d'un exercice
  - Choix de l'exercice Moria de la leçon Welcome
- [ ] Création de tous les blocks nécessaire à PLM
- [ ] Générer le code du schéma Blockly
  - Corriger les problèmes liés à la génération du code
- [ ] Lier Blockly avec l'exercice en cours
- [ ] Gestion du stockage du code généré
- [ ] Générer un schéma Blockly à partir d'un code Python
** 17 avril
*** Activité
- Limitation de la taille de blockly pour éviter un agrandissement de
  la fenêtre à chaque action
- Ajout de blockly dans la liste des langages
- Ajout de quelques nouveaux blocs de test
*** Problème
- Blockly n'apparait qu'après avoir modifié la taille de la fenêtre web
  - Problème à éclaircir
*** Objectif
- [X] Modification de l'ajout de l'interface de Blockly
- [X] Lier Blockly avec la page web
- [ ] Rendre immédiat l'affichage de blockly à sa sélection
- [ ] Mettre en place tous les blocs d'un exercice
  - Afin de pouvoir continuer l'ajout complet de blockly pour une situation
- [ ] Création de tous les blocks nécessaire à PLM
  - Séparation de leur ajout dans la liste disponible suivant l'exercice en cours
- [ ] Générer le code du schéma Blockly
  - Execution de l'exercice
- [ ] Lier Blockly avec l'exercice en cours
- [ ] Gestion du stockage du code généré
- [ ] Générer un schéma Blockly à partir d'un code Python
** 16 avril
*** Activité
- Mise en place de blockly avec AngularJS en m'appuyant sur la
  réalisation de cdjackson
  - Séparation de .service .provider .config .directive
    - Pour rester dans la structure du projet existant
  - Non fonctionnelle pour le moment
*** Problème
*** Objectif
- [ ] Modification de l'ajout de l'interface de Blockly
  - Finir l'extraction de la iframe vers un état stable
- [ ] Lier Blockly avec la page web
  - Run => Génération de code
- [ ] Générer le code du schéma Blockly
- [ ] Lier Blockly avec l'exercice en cours
  - Limiter les blocks disponbles
- [ ] Générer un schéma Blockly à partir d'un code Python
** 15 avril
*** Activité
- Test pour extraire Blockly de la iframe pour une implentation en
  passant par une directive/service
  - Configuration direct, sans jongler avec les getteur/setteur de la
    iframe et de la page direct
  - Plus "propre" à mon sens
  - Utilisation de services d'AngularJS
*** Problème
- Fonctionnement des outils AngularJS mal connus
- Liaison concrète entre les fonctions codées et celles existantes de
  Blockly encore flou
*** Objectif
- [ ] Modification de l'ajout de l'interface de Blockly
  - Finir l'extraction de la iframe vers un état stable
- [ ] Lier Blockly avec la page web
  - Run => Génération de code
- [ ] Générer le code du schèma Blockly
- [ ] Lier Blockly avec l'exercice en cours
  - Limiter les blocks disponibles
- [ ] Générer un schéma Blockly à partir d'un code Python
** 14 avril
*** Activité
- Affichage de l'interface Blockly
- Retouche image et code de la base plm pour Blockly
  - Mauvaise taille image
*** Problème
- Lien entre Angularjs et Blockly à approfondir
*** Objectif
- [X] Permettre la selection de Blockly dans la liste des langages
- [ ] Modification de l'ajout de l'interface de Blockly
  - A mettre dans des fichiers extérieur et jouer avec les appels plutôt que de le mettre en dure dans l'html afin de simplifier la "confiuration" de Blockly
- [ ] Regarder comment récupérer le code généré par Blockly
  - Générer du code Python à envoyer au serveur lors des executions de l'éditeur de source à travers Blockly
- [ ] Se pencher sur la corredpondance entre l'exercice en cours avec ses langages supportées et Blockly
- [ ] Générer un schéma Blockly à partir d'un code Python
** 13 avril
*** Activité
- Création d'un langage Blockly (code en python)
- Son ajout dans les listes de langages disponibles pour quelques
  exercices
- Affichage du code correspondant dans l'éditeur de source
- Ajout nouveau .jar dans le webPLM
- Documentation
 - CodeMirror
 - Blockly
 - Implémentation actuelle
*** Problème
- L'élément Blockly dans la liste des langages disponible n'est pas à
  la même taille que les autres langages
- Situation de l'ajout d'un nouvel exercice avec Blockly disponible ?
*** Objectif
- [X] Ajouter Blockly dans la liste des langages
- [ ] Permettre la selection de Blockly dans la liste des langages
  - Remplacer l'aspect de l'éditeur de source actuel par l'interface de
  Blockly lorsqu'on sélectionne Blockly comme langage
  - Création de blocs correspondant aux fonctions déjà fournis par
    l'enseignant
- [ ] Regarder comment récupérer le code généré par Blockly (probablement en Python mais à définir)
  - Générer du code Python à envoyer au serveur lors des executions de l'éditeur de source à travers Blockly
- [ ] Se pencher sur la correspondance entre l'exercice en cours avec ses langages supportées et Blockly
- [ ] Générer un schéma Blockly à partir d'un code Python
** 10 avril
*** Activité
- Suite des modifications pour l'ajout de Blockly en langage disponible
- Corrections de divers problèmes pour repartir sur une base saine et
  fonctionnelle
*** Problème
- Commandes dans le fichier ant incompatible avec mon l'environement
  windows actuel
- Précédentes modifications réalisées sur un fork de la mauvaise
  branche du projet PLM
*** Objectif
- [ ] Ajouter Blockly dans la liste des langages
  - Refaire les modifications des classes LangBlockly et Game
- [ ] Permettre la selection de Blockly dans la liste des langages
  - Ajouter Blockly comme langage pour un seul exercice
  - Création de nouveaux fichiers en .blockly dupliqués des .py pour commencer
- [ ] Regarder comment récupérer le code généré par Blockly (probablement en Python mais à définir) 
- [ ] Se pencher sur la correspondance entre l'exercice en cours avec ses langages supportées et Blockly
- [ ] Générer un schéma Blockly à partir d'un code python
** 9 avril
*** Activité
- Finition installation de l'environnement de travail (dépôt, fork, pull, gcc...)
- Début des mofications de l'existant pour tester de quoi fait quoi et où
- Conférence sur la sécurité informatique
- Début des tentatives d'ajout de Blockly comme un nouveau langage
  dans la liste
  - Création classe PLM/src/plm/core/lang/LangBlockly.java
  - Modification classe PLM/src/plm/core/model/Game.java
*** Problème
- Ajout du "langage" Blockly dans la base du projet, PLM de base (en
  cours de réalisation) ou ajout à partir de la version web ?
  - Version web
- Taille maximal de l'image du langage (j'ai ajouté une image de 5 ko
  alors que les images actuelles font au maximum 1 ko) ?
  - Pas de problème
- Liaison entre les deux projets sur lesquels j'ai effectué des
  fork/branches automatique ou paramétrages à effectuer ?
*** Objectif
- [X] Test de fonctionnement des différents outils déjà existants pour les associer pour un rendu les comprennants
  - Principes intéressants mis en oeuvres dans les démos de Blockly (iFrame, Toolbox, Code Editor, Block Factory)
- [ ] Ajouter Blockly dans la liste des langages
- [ ] Permettre la selection de Blockly dans la liste des langages
- [ ] Modification de l'affichage de la zone du code pour laisser la place à Blockly
- [ ] Regarder comment récupérer le code généré par Blockly (probablement en python mais à définir)
- [ ] Se pencher sur la correspondance entre l'exercice en cours avec ses langages supportés et Blockly
- [ ] Créer des Blocks à partir d'un morceau de code
** 8 avril
*** Activité
- Documentation
  - Syntaxe programmes en C, Phyton, Scala
- Etude de l'existant
  - WebPLM, Structure du projet
- Outils actuels intéressant pour Blockly (https://developers.google.com/blockly/)
  - Resizable, permettant de donner une taille dynamique par rapport à la page
  - Toolbox, permettant de créer des catégories de block (dans le menu)
  - Block Factory, permettant de créer ses propres blocks (dans le cas
    de la création d'un fonction pour par un enseignant un exercice)
  - Generate JavaScript, traduisant les blocks en js et qui l'execute
  - JS Interpreter, traduction en js et execution pas à pas avec
    notification du block en cours
  - Code Editor : traduction des blocks en js ou Python ou Dart ou XML
*** Problème
- Ajout potentiellement possible : définir un nombre maximum de block
- Où mettre la fenêtre de Blockly ?
  - Dans un onglet au même niveau que Resultat et Logs afin de pouvoir
    voir le code et les blocks en même temps
  - Dans une nouvelle zone mais qui risque de réduire la taille dédiée
    aux autres
  - Entre le code et le résultat
  - Avec Monde et Objectif dans un autre onglet
    - A la place de l'éditeur de source actuel
*** Objectif
- [X] Regarder le retour de Blockly (langague, forme)
  - Choix porté sur une génération en Python
- [X] Chercher une liaison réalisable entre Blockly et PLM
  - Insérer Blockly comme un "langage" classique
- [ ] Test de fonctionnement des différents outils déjà existants pour les associer pour un rendu les comprennants
- [ ] Créer des Blocks à partir d'un morceau de code
** 7 avril
*** Activité
- Création dépot de Reporting
- Réalisation des cours sur Angular.JS de Code School
- Première exploration de Blockly (documentation et code source sur
  GitHub)
- Exploration de l'implémentation actuelle de PLM
*** Problème
- Rendu de l'ajout de Blockly
 - Blockly comme un language (dans le menu au même titre que java, scala...)
 - En supplément de la zone où s'affiche les commandes (avec l'un ou
   l'autre ou les deux modifiables et mise à jour du second)
*** Objectif
- [ ] Regarder le retour de Blockly (language, forme)
- [ ] Rechercher une liaison réalisable entre Blockly et PLM
